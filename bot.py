import discord
from discord.ext import commands
from discord.ui import Button, View
import requests
import json
import os


TOKEN = 'MTMwMjE4NzkzODA2MjI3NDU3MQ.GDqzuK.V4amGRz0V0my4WNuPZgboPoWamJKDKvoLNm8kY'
MODERATORS = ["jevilxs"]
DEVELOPERS = ["jevilxs"]

BANS_FILE = "bans.json"
banned_users = {}

LANG = {
    "ru": {
        "banned": "‚õî –í—ã –∑–∞–±–∞–Ω–µ–Ω—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {}",
        "ticket_button": "üé´ –°–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç",
        "ticket_prompt": "‚úèÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ, —á—Ç–æ —É –≤–∞—Å —Å–ª—É—á–∏–ª–æ—Å—å.",
        "ticket_timeout": "‚è∞ –í—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –∏—Å—Ç–µ–∫–ª–æ.",
        "ticket_created": "‚úÖ –¢–∏–∫–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞–º!",
        "ticket_closed": "‚úÖ –û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω.",
        "no_access": "‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞.",
        "reply_prompt": "‚úâÔ∏è –ù–∞–ø–∏—à–∏—Ç–µ –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.",
        "developer_panel": "üõ†Ô∏è –ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞",
        "ban_success": "üîí –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{}** –±—ã–ª –∑–∞–±–∞–Ω–µ–Ω.\n–ü—Ä–∏—á–∏–Ω–∞: {}",
        "unban_success": "‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å **{}** –±—ã–ª —Ä–∞–∑–±–∞–Ω–µ–Ω.",
        "banned_dm": "‚ùó –í—ã –±—ã–ª–∏ –∑–∞–±–∞–Ω–µ–Ω—ã.\n–ü—Ä–∏—á–∏–Ω–∞: {}",
        "unbanned_dm": "‚úÖ –í—ã –±—ã–ª–∏ —Ä–∞–∑–±–∞–Ω–µ–Ω—ã –∏ —Å–Ω–æ–≤–∞ –º–æ–∂–µ—Ç–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –±–æ—Ç–∞!"
    }
}

LANGUAGE = "ru"

intents = discord.Intents.default()
intents.messages = True
intents.guilds = True
intents.members = True
intents.message_content = True

bot = commands.Bot(command_prefix='!', intents=intents)
bot.remove_command('help')

active_tickets = set()         
moderators_busy = set()       
ticket_in_process = {} 

def load_bans():
    global banned_users
    if os.path.exists(BANS_FILE):
        with open(BANS_FILE, "r") as f:
            try:
                banned_users = json.load(f)
                banned_users = {int(k): v for k, v in banned_users.items()}
            except json.JSONDecodeError:
                banned_users = {}

def save_bans():
    with open(BANS_FILE, "w") as f:
        json.dump(banned_users, f)

@bot.command()
async def ban(ctx, user: discord.User, *, reason="–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã"):
    if ctx.author.name not in DEVELOPERS:
        return
    banned_users[user.id] = {
        "reason": reason,
        "moderator": ctx.author.name
    }
    save_bans()
    await ctx.send(embed=discord.Embed(description=LANG[LANGUAGE]["ban_success"].format(user.name, reason), color=discord.Color.red()))
    try:
        await user.send(embed=discord.Embed(description=LANG[LANGUAGE]["banned_dm"].format(reason), color=discord.Color.dark_red()))
    except:
        pass

@bot.command()
async def banlist(ctx):
    if ctx.author.name not in DEVELOPERS:
        await ctx.send(LANG[LANGUAGE]["no_access"])
        return

    if not banned_users:
        await ctx.send("‚úÖ –°–ø–∏—Å–æ–∫ –±–∞–Ω–æ–≤ –ø—É—Å—Ç.")
        return

    embed = discord.Embed(title="üìÑ –°–ø–∏—Å–æ–∫ –∑–∞–±–∞–Ω–µ–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π", color=discord.Color.red())

    for user_id, ban_data in banned_users.items():
        user_tag = f"<@{user_id}>"
        reason = ban_data.get("reason", "–ë–µ–∑ –ø—Ä–∏—á–∏–Ω—ã")
        moderator = ban_data.get("moderator", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
        embed.add_field(
            name=f"üö´ {user_tag}",
            value=f"**–ü—Ä–∏—á–∏–Ω–∞:** {reason}\n**–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä:** {moderator}",
            inline=False
        )

    await ctx.send(embed=embed)

@bot.command()
async def unban(ctx, user: discord.User):
    if ctx.author.name not in DEVELOPERS:
        return
    if user.id in banned_users:
        del banned_users[user.id]
        save_bans()
        await ctx.send(embed=discord.Embed(description=LANG[LANGUAGE]["unban_success"].format(user.name), color=discord.Color.green()))
        try:
            await user.send(embed=discord.Embed(description=LANG[LANGUAGE]["unbanned_dm"], color=discord.Color.green()))
        except:
            pass

@bot.check
async def only_dm(ctx):
    if ctx.guild is not None:
        try:
            await ctx.send("üö´ –≠—Ç–∞ –∫–æ–º–∞–Ω–¥–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ç–æ–ª—å–∫–æ –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö!")
        except discord.Forbidden:
            pass  
        return False  
    return True  

@bot.check
async def check_ban(ctx):
    if ctx.author.id in banned_users:
        reason = banned_users[ctx.author.id]["reason"]
        try:
            await ctx.send(embed=discord.Embed(description=LANG[LANGUAGE]["banned"].format(reason), color=discord.Color.red()))
        except:
            pass
        return False
    return True

class TicketView(View):
    def __init__(self, author_id):
        super().__init__(timeout=None)
        self.author_id = author_id

    @discord.ui.button(label=LANG[LANGUAGE]["ticket_button"], style=discord.ButtonStyle.green, custom_id="create_ticket")
    async def create_ticket_button(self, interaction: discord.Interaction, button: Button):
        user_id = interaction.user.id

        if user_id in active_tickets:
            await interaction.response.send_message("‚ùó –£–∂–µ —Å–æ–∑–¥–∞–Ω —Ç–∏–∫–µ—Ç.", ephemeral=True)
            return

        if user_id != self.author_id:
            await interaction.response.send_message("‚ùó –¢–æ–ª—å–∫–æ –≤—ã –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞—Ç—å —Ç–∏–∫–µ—Ç.", ephemeral=True)
            return

        active_tickets.add(user_id)
        await interaction.response.send_message(LANG[LANGUAGE]["ticket_prompt"], ephemeral=True)

        def check(msg):
            return msg.author.id == user_id and msg.channel == interaction.channel

        try:
            msg = await bot.wait_for('message', check=check, timeout=120)
        except:
            active_tickets.remove(user_id)
            await interaction.followup.send(LANG[LANGUAGE]["ticket_timeout"], ephemeral=True)
            return


        take_view = View()
        take_button = Button(label="üì• –í–∑—è—Ç—å –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", style=discord.ButtonStyle.green)

        async def take_callback(take_interaction: discord.Interaction):
            mod_id = take_interaction.user.id

            if take_interaction.user.name not in MODERATORS:
                await take_interaction.response.send_message(LANG[LANGUAGE]["no_access"], ephemeral=True)
                return

            if mod_id in moderators_busy:
                await take_interaction.response.send_message("‚ùó –í—ã —É–∂–µ –≤–∑—è–ª–∏ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ç.", ephemeral=True)
                return

            if user_id in ticket_in_process:
                await take_interaction.response.send_message("‚ùó –≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.", ephemeral=True)
                return


            moderators_busy.add(mod_id)
            ticket_in_process[user_id] = mod_id

            await take_interaction.response.edit_message(content=f"–¢–∏–∫–µ—Ç –≤–∑—è—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {take_interaction.user.mention}", view=close_view)


            user = await bot.fetch_user(user_id)
            await user.send(f"üì• –í–∞—à —Ç–∏–∫–µ—Ç –≤–∑—è—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {take_interaction.user.name}. –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã —Å—é–¥–∞.")

        take_button.callback = take_callback
        take_view.add_item(take_button)


        close_view = View()
        close_button = Button(label="üîí –ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", style=discord.ButtonStyle.danger)

        async def close_callback(close_interaction: discord.Interaction):
            mod_id = close_interaction.user.id

            if mod_id not in moderators_busy:
                await close_interaction.response.send_message(LANG[LANGUAGE]["no_access"], ephemeral=True)
                return

            if user_id not in ticket_in_process or ticket_in_process[user_id] != mod_id:
                await close_interaction.response.send_message("‚ùó –í—ã –Ω–µ –≤–∑—è–ª–∏ —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç.", ephemeral=True)
                return


            active_tickets.remove(user_id)
            moderators_busy.remove(mod_id)
            del ticket_in_process[user_id]

            await close_interaction.response.send_message(LANG[LANGUAGE]["ticket_closed"], ephemeral=True)


            user = await bot.fetch_user(user_id)
            try:
                await user.send(f"‚úÖ –í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {close_interaction.user.name}. –°–ø–∞—Å–∏–±–æ!")
            except:
                pass

        close_button.callback = close_callback
        close_view.add_item(close_button)

        embed = discord.Embed(
            title="üé´ –ù–æ–≤—ã–π —Ç–∏–∫–µ—Ç",
            description=f"**–û—Ç:** {interaction.user.mention}\n**–°–æ–æ–±—â–µ–Ω–∏–µ:**\n{msg.content}",
            color=discord.Color.blue()
        )


        moderator_names = set()

        for guild in bot.guilds:
            for member in guild.members:
                if member.name in MODERATORS:
                    moderator_names.add(member.name)

        for mod_name in moderator_names:
            try:
                
                for guild in bot.guilds:
                    member = discord.utils.find(lambda m: m.name == mod_name, guild.members)
                    if member:
                        await member.send(embed=embed, view=take_view)
                        break
            except:
                continue

        await interaction.followup.send(LANG[LANGUAGE]["ticket_created"], ephemeral=True)

class TicketModerationView(View):
    def __init__(self, ticket_author_id):
        super().__init__(timeout=None)
        self.ticket_author_id = ticket_author_id
        self.claimed = False
        self.moderator_id = None

    @discord.ui.button(label="–í–∑—è—Ç—å –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ", style=discord.ButtonStyle.green)
    async def take_button(self, interaction: discord.Interaction, button: Button):
        if interaction.user.name not in MODERATORS:
            await interaction.response.send_message(LANG[LANGUAGE]["no_access"], ephemeral=True)
            return

        if interaction.user.id in moderators_busy:
            await interaction.response.send_message("–í—ã —É–∂–µ —Ä–∞—Å—Å–º–∞—Ç—Ä–∏–≤–∞–µ—Ç–µ –¥—Ä—É–≥–æ–π —Ç–∏–∫–µ—Ç.", ephemeral=True)
            return

        if self.claimed:
            await interaction.response.send_message("–≠—Ç–æ—Ç —Ç–∏–∫–µ—Ç —É–∂–µ –≤–∑—è—Ç –¥—Ä—É–≥–∏–º –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.", ephemeral=True)
            return


        self.claimed = True
        self.moderator_id = interaction.user.id
        moderators_busy.add(interaction.user.id)
        ticket_in_process[self.ticket_author_id] = interaction.user.id

        await interaction.response.send_message(f"–í—ã –≤–∑—è–ª–∏ —Ç–∏–∫–µ—Ç –æ—Ç <@{self.ticket_author_id}> –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ.", ephemeral=True)

        try:
            user = await bot.fetch_user(self.ticket_author_id)
            await user.send(f"–í–∞—à —Ç–∏–∫–µ—Ç –≤–∑—è—Ç –Ω–∞ —Ä–∞—Å—Å–º–æ—Ç—Ä–µ–Ω–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º {interaction.user.name}. –ú–æ–∂–µ—Ç–µ –ø–∏—Å–∞—Ç—å —Å—é–¥–∞.")
        except:
            pass

    @discord.ui.button(label="–ó–∞–∫—Ä—ã—Ç—å —Ç–∏–∫–µ—Ç", style=discord.ButtonStyle.red)
    async def close_button(self, interaction: discord.Interaction, button: Button):
        if interaction.user.id not in moderators_busy:
            await interaction.response.send_message(LANG[LANGUAGE]["no_access"], ephemeral=True)
            return

        if ticket_in_process.get(self.ticket_author_id) != interaction.user.id:
            await interaction.response.send_message("–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–º –∑–∞ —ç—Ç–æ—Ç —Ç–∏–∫–µ—Ç.", ephemeral=True)
            return

        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Ç–∏–∫–µ—Ç
        active_tickets.discard(self.ticket_author_id)
        moderators_busy.discard(interaction.user.id)
        ticket_in_process.pop(self.ticket_author_id, None)

        await interaction.response.send_message(LANG[LANGUAGE]["ticket_closed"], ephemeral=True)

        try:
            user = await bot.fetch_user(self.ticket_author_id)
            await user.send("–í–∞—à —Ç–∏–∫–µ—Ç –±—ã–ª –∑–∞–∫—Ä—ã—Ç.")
        except:
            pass

@bot.command()
async def ticket(ctx):
    view = TicketView(ctx.author.id)
    embed = discord.Embed(title="üéüÔ∏è –¢–∏–∫–µ—Ç", description="–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∏–∫–µ—Ç–∞.", color=discord.Color.blurple())
    await ctx.send(embed=embed, view=view)

@bot.command()
async def developer(ctx):
    if ctx.author.name not in DEVELOPERS:
        return
    embed = discord.Embed(title=LANG[LANGUAGE]["developer_panel"], description="–ö–æ–º–∞–Ω–¥—ã —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞:", color=discord.Color.dark_red())
    embed.add_field(name="!ban [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å] [–ø—Ä–∏—á–∏–Ω–∞]", value="üîí –ó–∞–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", inline=False)
    embed.add_field(name="!unban [–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å]", value="üîì –†–∞–∑–±–∞–Ω–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", inline=False)
    embed.add_field(name="!developer", value="‚öôÔ∏è –ü–∞–Ω–µ–ª—å —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞", inline=False)
    await ctx.send(embed=embed)

class HelpMenu(View):
    def __init__(self):
        super().__init__(timeout=None)

        self.main_embed = discord.Embed(
            title="üìò –ú–µ–Ω—é –ø–æ–º–æ—â–∏",
            description="–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –∫–æ–º–∞–Ω–¥ –Ω–∏–∂–µ üëá",
            color=discord.Color.purple()
        )

        self.embeds = {
            "main": discord.Embed(
                title="üìå –û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                description="`!help`, `!ticket`, `!info`",
                color=discord.Color.blue()
            ),
            "fun": discord.Embed(
                title="üéâ –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã",
                description="`!joke`, `!cat`, `!dog`",
                color=discord.Color.green()
            )
        }

    @discord.ui.button(label="üìå –û—Å–Ω–æ–≤–Ω—ã–µ", style=discord.ButtonStyle.primary)
    async def main_button_callback(self, interaction: discord.Interaction, button: Button):
        await interaction.response.edit_message(embed=self.embeds["main"], view=self)

    @discord.ui.button(label="üéâ –†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è", style=discord.ButtonStyle.success)
    async def fun_button_callback(self, interaction: discord.Interaction, button: Button):
        await interaction.response.edit_message(embed=self.embeds["fun"], view=self)

@bot.command()
async def help(ctx):
    view = HelpMenu()
    await ctx.send(embed=view.main_embed, view=view)

@bot.command()
async def info(ctx):
    embed = discord.Embed(title="‚ÑπÔ∏è –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", description="–ú–Ω–æ–≥–æ—Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π –±–æ—Ç Discord.", color=discord.Color.green())
    embed.add_field(name="–í–µ—Ä—Å–∏—è", value="2.0")
    await ctx.send(embed=embed)

@bot.command()
async def joke(ctx):
    try:
        res = requests.get("https://official-joke-api.appspot.com/random_joke")
        data = res.json()
        await ctx.send(f"üé≠ {data['setup']}\n||{data['punchline']}||")
    except:
        pass

@bot.command()
async def cat(ctx):
    try:
        res = requests.get("https://api.thecatapi.com/v1/images/search")
        url = res.json()[0]['url']
        embed = discord.Embed(title="üò∫ –ö–æ—Ç–∏–∫!", color=discord.Color.orange())
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    except:
        pass

@bot.command()
async def dog(ctx):
    try:
        res = requests.get("https://dog.ceo/api/breeds/image/random")
        url = res.json()['message']
        embed = discord.Embed(title="üê∂ –ü—ë—Å–∏–∫!", color=discord.Color.orange())
        embed.set_image(url=url)
        await ctx.send(embed=embed)
    except:
        pass

@bot.event
async def on_message(message):
    await bot.process_commands(message)


    if message.author.bot:
        return


    if isinstance(message.channel, discord.DMChannel):
        user_id = message.author.id
        if user_id in ticket_in_process:

            mod_id = ticket_in_process[user_id]
            mod = await bot.fetch_user(mod_id)
            await mod.send(f"üì© –û—Ç <@{user_id}>: {message.content}")
        elif user_id in moderators_busy:
            for t_user, mod_id in ticket_in_process.items():
                if mod_id == user_id:
                    user = await bot.fetch_user(t_user)
                    await user.send(f"üì© –û—Ç–≤–µ—Ç –æ—Ç –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞: {message.content}")
                    break

@bot.event
async def on_ready():
    load_bans()
    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω: {bot.user}")

bot.run(TOKEN)
